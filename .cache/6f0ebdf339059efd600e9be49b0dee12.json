{"dependencies":[{"name":"express","loc":{"line":1,"column":24}},{"name":"morgan","loc":{"line":3,"column":19}},{"name":"body-parser","loc":{"line":4,"column":23}},{"name":"mongoose","loc":{"line":5,"column":21}},{"name":"./models.js","loc":{"line":6,"column":19}},{"name":"cors","loc":{"line":7,"column":17}},{"name":"dotenv","loc":{"line":8,"column":19}},{"name":"express-validator","loc":{"line":12,"column":44}},{"name":"./auth.js","loc":{"line":25,"column":19}},{"name":"passport","loc":{"line":27,"column":25}},{"name":"./passport.js","loc":{"line":28,"column":8}}],"generated":{"js":"const express = require('express'),\n      app = express(),\n      morgan = require('morgan'),\n      bodyParser = require('body-parser'),\n      mongoose = require('mongoose'),\n      Models = require('./models.js'),\n      cors = require('cors'),\n      dotenv = require('dotenv');\n\nconst port = undefined || 8080;\n\nconst { check, validationResult } = require('express-validator');\n\nconst Movies = Models.Movie;\nconst Users = Models.User;\n\ndotenv.config({ path: './config.env' });\n\nmongoose.connect(undefined, { useNewUrlParser: true, useUnifiedTopology: true });\n\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\nlet auth = require('./auth.js')(app);\n\nconst passport = require('passport');\nrequire('./passport.js');\n\napp.use(morgan('common'));\napp.get('/', (req, res) => {\n  res.send('Welcome to my database!');\n});\n\napp.get('/movies', function (req, res) {\n  Movies.find().then(function (movies) {\n    res.status(201).json(movies);\n  }).catch(function (error) {\n    console.error(error);\n    res.status(500).send('Error: ' + error);\n  });\n});\n\napp.get('/movies/:Title', passport.authenticate('jwt', { session: false }), (req, res) => {\n  Movies.findOne({ Title: req.params.Title }).then(movie => {\n    res.json(movie);\n  }).catch(err => {\n    console.error(err);\n    res.status(500).send('Error: ' + err);\n  });\n});\n\napp.get('/movies/:Title/genre', passport.authenticate('jwt', { session: false }), (req, res) => {\n  Movies.findOne({ Title: req.params.Title }).then(movie => {\n    res.json(movie.Genre);\n  }).catch(err => {\n    res.status(500).send('Error: ' + err);\n  });\n});\n\napp.get('/movies/:Title/director', passport.authenticate('jwt', { session: false }), (req, res) => {\n  Movies.findOne({ Title: req.params.Title }).then(movie => {\n    res.json(movie.Director);\n  }).catch(err => {\n    res.status(500).send('Error: ' + err);\n  });\n});\n\napp.post('/users', [check('Username', 'Username is required').isLength({ min: 5 }), check('Username', 'Username contains non alphanumeric characters - not allowed.').isAlphanumeric(), check('Password', 'Password is required').not().isEmpty(), check('Email', 'Email does not appear to be valid').isEmail()], (req, res) => {\n\n  let errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  const hashedPassword = Users.hashPassword(req.body.Password);\n\n  Users.findOne({ Username: req.body.Username }).then(user => {\n    if (user) {\n      return res.status(400).send(req.body.Username + ' already exists');\n    } else {\n      Users.create({\n        Name: req.body.Name,\n        Username: req.body.Username,\n        Password: hashedPassword,\n        Email: req.body.Email,\n        Birthday: req.body.Birthday\n      }).then(user => {\n        res.status(201).json(user);\n      }).catch(error => {\n        console.error(error);\n        res.status(500).send('Error: ' + error);\n      });\n    }\n  }).catch(error => {\n    console.error(error);\n    res.status(500).send('Error: ' + error);\n  });\n});\n\napp.put('/users/:Username', [check('Username', 'Username is required').isLength({ min: 5 }), check('Username', 'Username contains non alphanumeric characters - not allowed.').isAlphanumeric(), check('Password', 'Password is required').not().isEmpty(), check('Email', 'Email does not appear to be valid').isEmail()], passport.authenticate('jwt', { session: false }), (req, res) => {\n\n  let errors = validationResult(req);\n\n  if (!errors.isEmpty()) {\n    return res.status(422).json({ errors: errors.array() });\n  }\n\n  const hashedPassword = Users.hashPassword(req.body.Password);\n\n  Users.findOneAndUpdate({ Username: req.params.Username }, {\n    $set: {\n      Username: req.body.Username,\n      Password: hashedPassword,\n      Email: req.body.Email,\n      Birthday: req.body.Birthday\n    }\n  }, { new: true }, (err, updatedUser) => {\n    if (err) {\n      console.error(error);\n      res.status(500).send('Error: ' + err);\n    } else {\n      res.send('Information has been updated! \\n' + updatedUser);\n    }\n  });\n});\n\napp.post('/users/:Username/movies/:MovieID', passport.authenticate('jwt', { session: false }), (req, res) => {\n  Users.findOneAndUpdate({ Username: req.params.Username }, { $push: { FavoriteMovies: req.params.MovieID } }, { new: true }, (err, updatedUser) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error: ' + err);\n    } else {\n      res.json(updatedUser);\n    }\n  });\n});\n\napp.delete('/users/:Username/movies/:MovieID', passport.authenticate('jwt', { session: false }), (req, res) => {\n  Users.findOneAndUpdate({ Username: req.params.Username }, { $pull: { FavoriteMovies: req.params.MovieID } }, { new: true }, (err, updatedUser) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error: ' + err);\n    } else {\n      res.json(updatedUser);\n    }\n  });\n});\n\napp.delete('/users/:Username/delete', passport.authenticate('jwt', { session: false }), (req, res) => {\n  Users.findOneAndRemove({ Username: req.params.Username }).then(user => {\n    if (!user) {\n      res.status(400).send(req.params.Username + ' was not found');\n    } else {\n      res.status(200).send(req.params.Username + ' was deleted.');\n    }\n  }).catch(err => {\n    console.error(err);\n    res.status(500).send('Error: ' + err);\n  });\n});\n\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Yikes! Something isnt right!');\n});\n\napp.listen(port, '0.0.0.0', () => {\n  console.log('Listening on Port ' + port);\n});"},"hash":"ec437e81dc96028ca630426dea09c23e"}