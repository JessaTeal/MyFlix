{"dependencies":[{"name":"passport","loc":{"line":1,"column":25}},{"name":"passport-local","loc":{"line":2,"column":26}},{"name":"./models.js","loc":{"line":3,"column":19}},{"name":"passport-jwt","loc":{"line":4,"column":24}}],"generated":{"js":"const passport = require('passport'),\n  LocalStrategy = require('passport-local').Strategy,\n  Models = require('./models.js'),\n  passportJWT = require('passport-jwt');\n\nlet Users = Models.User,\n  JWTStrategy = passportJWT.Strategy,\n  ExtractJWT = passportJWT.ExtractJwt;\n\npassport.use(new LocalStrategy({\n  usernameField: 'Username',\n  passwordField: 'Password',\n},\n(username, password, callback) => {\n  console.log(username + ' ' + password);\n  Users.findOne({ Username: username }, (error, user) => {\n    if (error) {\n      console.log(error);\n      return callback(error);\n    }\n    if (!user) {\n      console.log('incorrect username');\n      return callback(null, false, {message: 'Incorrect username or password.'});\n    }\n    if (!user.validatePassword(password)) {\n      console.log('incorrect password');\n      return callback(null, false, {message: 'Incorrect Password.'});\n    }\n\n    console.log('finished');\n    return callback(null, user);\n  });\n}));\n\npassport.use(new JWTStrategy(\n  {\n    jwtFromRequest: ExtractJWT.fromAuthHeaderAsBearerToken(),\n    secretOrKey: 'your_jwt_secret'\n  },\n  (jwtPayload, callback) => {\n  return Users.findById(jwtPayload._id)\n    .then((user) => {\n      return callback(null, user);\n    })\n    .catch((error) => {\n      return callback(error)\n    });\n}));\n"},"hash":"f3a21f809d85289d1e635f4cbbbf881d"}