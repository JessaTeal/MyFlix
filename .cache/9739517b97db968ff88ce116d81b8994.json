{"dependencies":[{"name":"lodash","loc":{"line":4,"column":18}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Context = void 0;\nconst _ = require(\"lodash\");\nfunction getDataMapKey(path, location) {\n    return `${location}:${path}`;\n}\nclass Context {\n    constructor(fields, locations, stack, optional, message) {\n        this.fields = fields;\n        this.locations = locations;\n        this.stack = stack;\n        this.optional = optional;\n        this.message = message;\n        this._errors = [];\n        this.dataMap = new Map();\n    }\n    get errors() {\n        return this._errors;\n    }\n    getData(options = { requiredOnly: false }) {\n        // Have to store this.optional in a const otherwise TS thinks the value could have changed\n        // when the functions below run\n        const { optional } = this;\n        const checks = options.requiredOnly && optional\n            ? [\n                (value) => value !== undefined,\n                (value) => (optional.nullable ? value != null : true),\n                (value) => (optional.checkFalsy ? value : true),\n            ]\n            : [];\n        return _([...this.dataMap.values()])\n            .groupBy('originalPath')\n            .flatMap((instances, group) => {\n            const locations = _.uniqBy(instances, 'location');\n            // #331 - When multiple locations are involved, all of them must pass the validation.\n            // If none of the locations contain the field, we at least include one for error reporting.\n            // #458, #531 - Wildcards are an exception though: they may yield 0..* instances with different\n            // paths, so we may want to skip this filtering.\n            if (instances.length > 1 && locations.length > 1 && !group.includes('*')) {\n                const withValue = instances.filter(instance => instance.value !== undefined);\n                return withValue.length ? withValue : [instances[0]];\n            }\n            return instances;\n        })\n            .filter(instance => checks.every(check => check(instance.value)))\n            .valueOf();\n    }\n    addFieldInstances(instances) {\n        instances.forEach(instance => {\n            this.dataMap.set(getDataMapKey(instance.path, instance.location), Object.assign({}, instance));\n        });\n    }\n    setData(path, value, location) {\n        const instance = this.dataMap.get(getDataMapKey(path, location));\n        if (!instance) {\n            throw new Error('Attempt to write data that did not pre-exist in context');\n        }\n        instance.value = value;\n    }\n    addError(message, valueOrNestedErrors, meta) {\n        const msg = message || this.message || 'Invalid value';\n        if (meta) {\n            this._errors.push({\n                value: valueOrNestedErrors,\n                msg: typeof msg === 'function' ? msg(valueOrNestedErrors, meta) : msg,\n                param: meta.path,\n                location: meta.location,\n            });\n        }\n        else {\n            this._errors.push({\n                msg,\n                param: '_error',\n                nestedErrors: valueOrNestedErrors,\n            });\n        }\n    }\n}\nexports.Context = Context;\n"},"hash":"6ced11e1f5ed6a4c7f2b28b9e1f65482"}