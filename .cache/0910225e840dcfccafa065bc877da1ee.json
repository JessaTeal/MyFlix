{"dependencies":[{"name":"../chain","loc":{"line":4,"column":24}},{"name":"./check","loc":{"line":5,"column":24}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSchema = void 0;\nconst chain_1 = require(\"../chain\");\nconst check_1 = require(\"./check\");\nconst validLocations = ['body', 'cookies', 'headers', 'params', 'query'];\nconst protectedNames = ['errorMessage', 'in'];\nfunction checkSchema(schema, defaultLocations = validLocations) {\n    const chains = Object.keys(schema).map(field => {\n        const config = schema[field];\n        const chain = check_1.check(field, ensureLocations(config, defaultLocations), config.errorMessage);\n        Object.keys(config)\n            .filter((method) => {\n            return config[method] && !protectedNames.includes(method);\n        })\n            .forEach(method => {\n            var _a;\n            if (typeof chain[method] !== 'function') {\n                console.warn(`express-validator: a validator/sanitizer with name ${method} does not exist`);\n                return;\n            }\n            // Using \"!\" because typescript doesn't know it isn't undefined.\n            const methodCfg = config[method];\n            let options = methodCfg === true ? [] : (_a = methodCfg.options) !== null && _a !== void 0 ? _a : [];\n            if (options != null && !Array.isArray(options)) {\n                options = [options];\n            }\n            if (isValidatorOptions(method, methodCfg) && methodCfg.if) {\n                chain.if(methodCfg.if);\n            }\n            if (isValidatorOptions(method, methodCfg) && methodCfg.negated) {\n                chain.not();\n            }\n            chain[method](...options);\n            if (isValidatorOptions(method, methodCfg) && methodCfg.errorMessage) {\n                chain.withMessage(methodCfg.errorMessage);\n            }\n            if (isValidatorOptions(method, methodCfg) && methodCfg.bail) {\n                chain.bail();\n            }\n        });\n        return chain;\n    });\n    const run = async (req) => {\n        return await Promise.all(chains.map(chain => chain.run(req)));\n    };\n    return Object.assign(chains, { run });\n}\nexports.checkSchema = checkSchema;\nfunction isValidatorOptions(method, methodCfg) {\n    return methodCfg !== true && method in chain_1.ValidatorsImpl.prototype;\n}\nfunction ensureLocations(config, defaults) {\n    // .filter(Boolean) is done because in can be undefined -- which is not going away from the type\n    // See https://github.com/Microsoft/TypeScript/pull/29955 for details\n    const locations = Array.isArray(config.in)\n        ? config.in\n        : [config.in].filter(Boolean);\n    const actualLocations = locations.length ? locations : defaults;\n    return actualLocations.filter(location => validLocations.includes(location));\n}\n"},"hash":"9b9594231d352360c718bc3c2f41acb8"}