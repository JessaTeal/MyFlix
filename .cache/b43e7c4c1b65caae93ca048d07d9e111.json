{"dependencies":[{"name":"lodash","loc":{"line":4,"column":18}},{"name":"../chain","loc":{"line":5,"column":24}},{"name":"../context-builder","loc":{"line":6,"column":34}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.oneOf = void 0;\nconst _ = require(\"lodash\");\nconst chain_1 = require(\"../chain\");\nconst context_builder_1 = require(\"../context-builder\");\n// A dummy context item that gets added to surrogate contexts just to make them run\nconst dummyItem = { async run() { } };\nfunction oneOf(chains, message) {\n    let result;\n    const middleware = async (req, _res, next) => {\n        const surrogateContext = new context_builder_1.ContextBuilder().addItem(dummyItem).build();\n        // Run each group of chains in parallel, and within each group, run each chain in parallel too.\n        const promises = chains.map(async (chain) => {\n            const group = Array.isArray(chain) ? chain : [chain];\n            const results = await Promise.all(group.map(chain => chain.run(req, { dryRun: true })));\n            const contexts = results.map(result => result.context);\n            const groupErrors = _.flatMap(contexts, 'errors');\n            // #536: The data from a chain within oneOf() can only be made available to e.g. matchedData()\n            // if its entire group is valid.\n            if (!groupErrors.length) {\n                contexts.forEach(context => {\n                    surrogateContext.addFieldInstances(context.getData());\n                });\n            }\n            return groupErrors;\n        });\n        try {\n            const allErrors = await Promise.all(promises);\n            const success = allErrors.some(groupErrors => groupErrors.length === 0);\n            if (!success) {\n                // Only add an error to the context if no group of chains had success.\n                surrogateContext.addError(typeof message === 'function' ? message({ req }) : message || 'Invalid value(s)', _.flatMap(allErrors));\n            }\n            // Final context running pass to ensure contexts are added and values are modified properly\n            result = await new chain_1.ContextRunnerImpl(surrogateContext).run(req);\n            next();\n        }\n        catch (e) {\n            next(e);\n        }\n    };\n    const run = async (req) => {\n        return new Promise((resolve, reject) => {\n            middleware(req, {}, (e) => {\n                e ? reject(e) : resolve(result);\n            });\n        });\n    };\n    return Object.assign(middleware, { run });\n}\nexports.oneOf = oneOf;\n"},"hash":"b152a085cda6fde12624ee936c597759"}